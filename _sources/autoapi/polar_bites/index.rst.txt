:py:mod:`polar_bites`
=====================

.. py:module:: polar_bites


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   column/index.rst
   conversion/index.rst
   expression/index.rst
   manipulation/index.rst
   mat/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   polar_bites.Column



Functions
~~~~~~~~~

.. autoapisummary::

   polar_bites.afx
   polar_bites.ofx
   polar_bites.iterate_over_variables
   polar_bites.partition



.. py:class:: Column


   A class to define a column to be used in loading experiment data

   .. py:attribute:: names
      :type: Union[str, Sequence[str]]

      The names to load from the data
          


   .. py:attribute:: rename
      :type: Optional[str]

      Rename the column names to the given name
          


   .. py:attribute:: as_type
      :type: Optional[type]

      Cast the values of the column to the given type
          


   .. py:attribute:: is_array
      :type: bool

      If true, transform the numpy array to a list of floats
          


   .. py:attribute:: pre_transform
      :type: Optional[Callable[[Any], Any]]

      A function to apply to values before they are included in the dataframe
          



.. py:function:: afx(*exps, **kwargs)

   Combine the given expressions with the & operator


.. py:function:: ofx(*exps, **kwargs)

   Combine the given expressions with the | operator


.. py:function:: iterate_over_variables(dataframe, variables, sort = True, output_as_dict = False)

   Create an iterator over the unique values of the given variables,
   sorting in the order they come in

   If output_as_dict is False, the first element of the output tuple is a tuple of the variables iterated over
   If output_as_dict is True, the first element of the output tuple is a dict of the variables iterated over

   :returns: An iterator over the different unique combinations of column values, and the corresponding dataframe.


.. py:function:: partition(dataframe, variables)

   Partition a dataframe based on the given variables.
   Returns a dictionary which is indexed by the tuple of the variables, each value being all the values
   in the original dataframe with those tuple variables


